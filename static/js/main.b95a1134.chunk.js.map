{"version":3,"sources":["components/form.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startDate","Date","name","number","externalCustomer","handleDateChange","bind","assertThisInitialized","handleNameChange","handleNumberChange","handleCheckboxChange","handleSubmit","date","setState","target","value","e","console","log","checkValidity","options","map","time","react_default","a","createElement","today","dd","getDate","mm","getMonth","now","getFullYear","FormWrapper","action","ItemWrapper","Input","type","id","onChange","required","style","display","DateWrapper","min","toString","ButtonWrapper","Button","Component","styled","div","_templateObject","_templateObject2","_templateObject3","_templateObject4","button","_templateObject5","input","_templateObject6","App","AppWrapper","form_Form","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b95a1134.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\n\n// const CALENDAR_ID = 't7dadt31kvscslmummfasftc08@group.calendar.google.com'\n// const API_KEY = 'AIzaSyATKGl2Zieu9yxu4FsxUgiBIE716db_Nac'\n// let url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}`\n\nexport default class Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: new Date(),\n      name: '',\n      number: 0,\n      externalCustomer: false,\n\n    };\n    this.handleDateChange = this.handleDateChange.bind(this);\n    this.handleNameChange = this.handleNameChange.bind(this);\n    this.handleNumberChange = this.handleNumberChange.bind(this);\n    this.handleCheckboxChange = this.handleCheckboxChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleDateChange(date) {\n    this.setState({\n      startDate: date\n    });\n  }\n  handleNameChange(name) {\n    this.setState({\n      name: name.target.value\n    });\n  }\n  handleNumberChange(number) {\n    this.setState({\n      number: number.target.value\n    });\n  }\n  handleCheckboxChange() {\n    const { externalCustomer } = this.state;\n    this.setState({\n      externalCustomer: !externalCustomer\n    });\n  }\n  handleSubmit(e) {\n    console.log(e.target.checkValidity());\n  }\n\n//entry.395002384 external cust\n//&entry.395002384=extcust&entry.1922675186=2019-02-27&entry.1720502080=10:23\n  render() {\n    const times = [\n      '9:00AM',\n      '9:30AM',\n      '10:00AM',\n      '10:30AM',\n      '11:00AM',\n      '11:30AM',\n      '12:00PM',\n      '12:30PM',\n      '1:00PM',\n      '1:30PM',\n      '2:00PM',\n      '2:30PM',\n      '3:00PM',\n      '3:30PM',\n      '4:00PM',\n      '4:30PM',\n      '5:00PM',\n    ];\n    const options = times.map((time) => {\n      return (\n        <option\n          value={time}\n        >\n          {time}\n        </option>\n      )\n    })\n\n    var today = new Date();\nvar dd = today.getDate();\nvar mm = today.getMonth() + 1; //January is 0!\n    var yyyy = today.getFullYear();\n    const now = yyyy + '-' + mm + '-' + dd;\n    console.log(now)\n    return (\n      <FormWrapper>\n        <form\n          action=' https://docs.google.com/forms/d/e/1FAIpQLScX5YkC5wqWQ778aLBpzWGYQWs62TYNAI-vSoLmjbi5SD3xLA/formResponse?usp=pp_url&'\n          target='hidden_iframe'>\n          <ItemWrapper>\n            <label>\n              Name:\n            </label>\n            <Input\n              type='text'\n              name='entry.988151643'\n              id='entry.988151643'\n              onChange={this.handleNameChange}\n              required\n            />\n          </ItemWrapper>\n          <ItemWrapper>\n            <label>\n              Number of Visitors:\n            </label>\n            <Input\n              type='number'\n              name='entry.1790580931'\n              id='entry.1790580931'\n              onChange={this.handleNumberChange}\n              required\n            />\n          </ItemWrapper>\n          <ItemWrapper>\n            <div>\n            <label>\n              External Customer:\n        </label>\n            <Input\n              type='checkbox'\n              onChange={this.handleCheckboxChange}\n            />\n            </div>\n            <Input\n              type='text'\n              name='entry.395002384'\n              id='entry.395002384'\n              style={this.state.externalCustomer ? {display:'block'} : {display:'none'}}\n            />\n          </ItemWrapper>\n          <DateWrapper>\n            <div>\n              <label>\n                Select Date:\n              </label>\n            </div>\n            <div>\n              <Input\n                type='date'\n                name='entry.1922675186'\n                id='entry.1922675186'\n                min={now}\n                value={now.toString}\n                required\n              />\n              <select\n                name='entry.1720502080'\n                id='entry.1720502080'>\n                {options}\n              </select>\n            </div>\n          </DateWrapper>\n          <ButtonWrapper>\n          <Button\n              type='submit'\n            >\n            submit\n          </Button>\n          </ButtonWrapper>\n        </form>\n        <iframe name=\"hidden_iframe\" id=\"hidden_iframe\" style={{display:'none'}}></iframe>\n      </FormWrapper>\n    )\n  }\n}\n\nconst FormWrapper = styled.div`\n  display: flex;\n  padding: 5%;\n  height: 25%;\n  max-width:750px\n  border: 5px rgba(254, 4, 4, .15) solid;\n  border-radius: 25px\n  display:flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: space-around;\n`;\n\nconst ItemWrapper = styled.div`\n  height: 25px\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px\n  @media( min-width:300px) {\n    flex-direction: row;\n    padding-top: 10px\n  }\n`;\nconst DateWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px\n  @media( min-width:300px) {\n    flex-direction: row;\n  }\n`;\nconst ButtonWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  padding: 5px\n  @media( min-width:300px) {\n    flex-direction: row;\n  }\n`;\n\n\nconst Button = styled.button`\nmargin: auto;\n  width: 50%;\n  align-self: center;\n  padding: 10px;\n  cursor: pointer;\n  border: 1px rgba(0, 0, 0, .15) solid;\n  border-radius: 10px;\n  :focus {\n      outline:none;\n    border:2px rgba(254, 4, 4, .5) solid;\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 5px;\n  :focus {\n      outline:none;\n    border:2px rgba(254, 4, 4, .5) solid;\n  }\n`;\n","import React, { Component } from 'react';\nimport Form from './components/form';\nimport styled from 'styled-components';\nclass App extends Component {\n  render() {\n    return (\n      <AppWrapper>\n        <Form />\n      </AppWrapper>\n    );\n  }\n}\n\nconst AppWrapper = styled.div`\n  height: 100vh;\n  display:flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}