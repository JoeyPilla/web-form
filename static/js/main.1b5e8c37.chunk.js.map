{"version":3,"sources":["logo.svg","components/Elements/TextInput.js","components/form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Input","styled","input","_templateObject","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","startDate","Date","name","number","externalCustomer","handleChange","bind","assertThisInitialized","date","setState","console","log","react_default","a","createElement","FormWrapper","ItemWrapper","type","require","es","selected","onChange","showTimeSelect","timeFormat","timeIntervals","dateFormat","timeCaption","toTimeString","Component","div","form_templateObject","_templateObject2","App","AppWrapper","form_Form","App_templateObject","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+RCEjC,IAAMC,EAAQC,IAAOC,MAAVC,oWCSGC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,IAAIC,KACfC,KAAM,GACNC,OAAQ,EACRC,iBAAkB,IAGpBZ,EAAKa,aAAeb,EAAKa,aAAaC,KAAlBb,OAAAc,EAAA,EAAAd,QAAAc,EAAA,EAAAd,CAAAD,KATHA,4EAYNgB,GACXb,KAAKc,SAAS,CACZT,UAAWQ,qCAMb,OADAE,QAAQC,IAAIhB,KAAKI,MAAMC,WAErBY,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAD,KACEJ,EAAAC,EAAAC,cAAA,sBAGAF,EAAAC,EAAAC,cAAC5B,EAAD,CAAO+B,KAAK,OAAOC,SAAO,KAE5BN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCAGAF,EAAAC,EAAAC,cAAC5B,EAAD,CAAO+B,KAAK,SAASC,SAAO,KAE9BN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mCAGAF,EAAAC,EAAAC,cAAC5B,EAAD,CAAO+B,KAAK,cAEdL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BAGAF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,SAAUzB,KAAKI,MAAMC,UACrBqB,SAAU1B,KAAKU,aACfiB,gBAAc,EACdC,WAAW,QACXC,cAAe,GACfC,WAAW,uBACXC,YAAY,UAIhBd,EAAAC,EAAAC,cAAA,UACGnB,KAAKI,MAAMC,UAAU2B,wBAzDEC,aAgE5Bb,EAAc5B,IAAO0C,IAAVC,KASXd,EAAc7B,IAAO0C,IAAVE,kMC/EXC,mLAEF,OACEpB,EAAAC,EAAAC,cAACmB,EAAD,KACErB,EAAAC,EAAAC,cAACoB,EAAD,cAJUN,aAUZK,EAAa9C,IAAO0C,IAAVM,KAQDH,ICXKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1b5e8c37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import styled from 'styled-components';\r\n\r\nexport const Input = styled.input`\r\n\r\n`;\r\n","import React, { Component } from 'react';\r\nimport { Input } from './Elements/TextInput';\r\nimport DatePicker from \"react-datepicker\";\r\nimport styled from 'styled-components';\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// const CALENDAR_ID = 't7dadt31kvscslmummfasftc08@group.calendar.google.com'\r\n// const API_KEY = 'AIzaSyATKGl2Zieu9yxu4FsxUgiBIE716db_Nac'\r\n// let url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}`\r\n\r\nexport default class Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      startDate: new Date(),\r\n      name: '',\r\n      number: 0,\r\n      externalCustomer: '',\r\n\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(date) {\r\n    this.setState({\r\n      startDate: date\r\n    });\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.startDate)\r\n    return (\r\n      <FormWrapper>\r\n        <ItemWrapper>\r\n          <label>\r\n            Name:\r\n          </label>\r\n          <Input type='text' require />\r\n        </ItemWrapper>\r\n        <div>\r\n          <label>\r\n            Number of Visitors:\r\n        </label>\r\n          <Input type='number' require />\r\n        </div>\r\n        <div>\r\n          <label>\r\n            External Customer:\r\n        </label>\r\n          <Input type='checkbox' />\r\n        </div>\r\n        <div>\r\n          <label>\r\n            Select Date:\r\n        </label>\r\n          <DatePicker\r\n            selected={this.state.startDate}\r\n            onChange={this.handleChange}\r\n            showTimeSelect\r\n            timeFormat=\"HH:mm\"\r\n            timeIntervals={30}\r\n            dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n            timeCaption=\"time\"\r\n          />\r\n        </div>\r\n\r\n        <h1>\r\n          {this.state.startDate.toTimeString()}\r\n        </h1>\r\n      </FormWrapper>\r\n    )\r\n  }\r\n}\r\n\r\nconst FormWrapper = styled.div`\r\nheight: 50%;\r\nwidth: 50%;\r\n  display:flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst ItemWrapper = styled.div`\r\n  justify-content: space-around;\r\n  align-items: space-around;\r\n`;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './components/form';\nimport styled from 'styled-components';\nclass App extends Component {\n  render() {\n    return (\n      <AppWrapper>\n        <Form />\n      </AppWrapper>\n    );\n  }\n}\n\nconst AppWrapper = styled.div`\n  height: 100vh;\n  display:flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}